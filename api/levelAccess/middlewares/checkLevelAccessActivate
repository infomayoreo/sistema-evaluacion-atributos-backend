import { decodeToken } from '../../../common/middlewares/validate-jwt';
import { NextFunction, Request, Response } from 'express';
import { LevelAccessDAO, UserDAO } from '../../../db/models';
import { CommonResponseBuilder } from '../../../interfaces/appResponseModel';
import { authErrosCodes } from '../../authenticate/helpers/authErrorManager'
import { responseHandler } from '../../../common/controllers/commonResponseHandler.controller';


export const validateActivateLevelAccess  = (req: Request, res: Response, next: NextFunction):
    Response<any, Record<string, any>> | undefined | void => {
        
        const token = req.header('token');
        const jwtPayload = decodeToken(String(token));
        UserDAO.findOne({
            where:{
                id:jwtPayload.id,
                activate:true
            },
            include:[{
                model:LevelAccessDAO
            }]
        }).then(user => {
           
            if(!user){
			
                const data = CommonResponseBuilder(401,authErrosCodes.AUTH_NOT_VALID_USER);
                responseHandler(res, data);
            }
            else{
                
                const levelAccess = user.getDataValue(LevelAccessDAO.name);
                if(levelAccess && levelAccess.activate) {
                    next();
                }
                else {
                    const data = CommonResponseBuilder(401,authErrosCodes.AUTH_DENIED_LEVEL_ACCESS);
                    return responseHandler(res, data);
                }
            }
        });
}